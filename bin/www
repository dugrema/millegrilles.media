#!/usr/bin/env node
require('dotenv').config()
const debug = require('debug')('www')

console.info("Env vars : %O", process.env)

const logger = require('morgan')
const redis = require("redis")
const fs = require('fs')

const backingStore = require('@dugrema/millegrilles.nodejs/src/fichiersTransfertBackingstore')
const transfertConsignation = require('./transfertConsignation')

const {initialiser: initialiserServer} = require('./server')
const {initialiser: initialiserApp} = require('./app');
const amqpdao = require('./amqpdao')

const CERT_CA_FILE = process.env.MG_MQ_CAFILE,
      CERT_FILE = process.env.MG_MQ_CERTFILE,
      KEY_CA_FILE = process.env.MG_MQ_KEYFILE,
      REDIS_PWD_FILE = process.env.MG_MQ_REDIS_PASSWD,
      URL_CONSIGNATION_FICHIERS = process.env.MG_CONSIGNATION_URL,  // || 'https://fichiers:443/fichiers_transfert',
      PATH_STAGING = process.env.PATH_STAGING || '/var/opt/millegrilles/consignation/staging/media',
      DESACTIVER_ROUTES = !!process.env.DESACTIVER_ROUTES

// Preparer certificats, mots de passe
function chargerCredendials() {
  const credentials = {
    millegrille: fs.readFileSync(CERT_CA_FILE).toString('utf-8'),
    cert: fs.readFileSync(CERT_FILE).toString('utf-8'),
    key: fs.readFileSync(KEY_CA_FILE).toString('utf-8'),
    redis_password: fs.readFileSync(REDIS_PWD_FILE).toString('utf-8'),
  }
  return credentials
}

async function init() {

  const credentials = chargerCredendials()

  // Preparer client redis (cache)
  const redisHost = process.env.MG_REDIS_HOST || 'redis',
        redisPortStr = process.env.MG_REDIS_PORT || '6379'

  const redisClient = redis.createClient({
    username: 'client_nodejs',
    password: credentials.redis_password,
    socket: {
      host: redisHost,
      port: Number(redisPortStr), 
      tls: true,
      ca: credentials.millegrille,
      cert: credentials.cert,
      key: credentials.key,
    }
  })
  
  debug("Redis client information :\n%O", redisClient)
  await redisClient.connect()
  await redisClient.ping()

  // Connexion AMQ
  const {amqpdao: instAmqpdao, messageHandler} = await amqpdao.init({redisClient})
  const idmg = instAmqpdao.pki.idmg

  debug("Initialisation serveur IDMG : %s", idmg)

  backingStore.configurerThreadPutFichiersConsignation(instAmqpdao, {url: URL_CONSIGNATION_FICHIERS, PATH_STAGING})
  // Injecter dans media
  transfertConsignation.init(instAmqpdao, backingStore)
  messageHandler.setStoreConsignation(instAmqpdao, backingStore, transfertConsignation)

  const middleware = [
    logger('dev'),
    (req, res, next) => {
      req.amqpdao = instAmqpdao
      req.rabbitMQ = instAmqpdao
      req.idmg = idmg
      req.storeConsignation = backingStore
      req.transfertConsignation = transfertConsignation
      next()
    }
  ]

  const root = await initialiserApp(instAmqpdao, {middleware})
  let server = null
  if(!DESACTIVER_ROUTES) {
    server = initialiserServer(root)
  } else {
    debug("Desactiver routes / server https")
  }

  // Hook pour un health check regulier (surtout pour connexion MQ)
  setInterval(()=>healthCheck(server, instAmqpdao).catch(err=>console.error("www.healthCheck ERROR : %O", err)), 60000)
}

let compteurErreurs = 0

async function healthCheck(server, instAmqpdao) {

  const erreurMq = instAmqpdao.channelError || instAmqpdao.connectionError || false

  debug("www.healthCheck %O status : erreurMq=%s", new Date(), erreurMq)

  if(erreurMq) {
    compteurErreurs++
    console.error("www.healthCheck Compte erreurs : %d", compteurErreurs)
    if(compteurErreurs > 3) {
      console.error("www.healthCheck Echec verification, fermeture du serveur")
      instAmqpdao.close()
        .then(()=>{
          if(server) server.close()
          process.exit()
        })
    }
  } else {
    compteurErreurs = 0  // Reset erreurs
  }
}

// Executer
init().catch(err=>{
  console.error("Erreur initialisation media : %O", err)
  process.exit()
})
